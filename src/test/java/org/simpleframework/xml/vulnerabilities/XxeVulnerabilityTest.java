package org.simpleframework.xml.vulnerabilities;

import org.assertj.core.api.Assertions;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.simpleframework.xml.Attribute;
import org.simpleframework.xml.Root;
import org.simpleframework.xml.Text;
import org.simpleframework.xml.core.Persister;
import org.simpleframework.xml.stream.*;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

public class XxeVulnerabilityTest {
   private static Path tempFile;
   private static String tempFileUri;

   @Root(name = "foo")
   public static class Foo {
      @Text(required = false)
      public String text;

      @Attribute(required = false, name = "attr")
      public String attr;
   }

   @BeforeClass
   public static void setupFiles() throws IOException {
      tempFile = Files.createTempFile("temp-", ".xml");
      tempFileUri = tempFile.normalize().toAbsolutePath().toUri().toString();

      Files.write(tempFile, "injected".getBytes(StandardCharsets.UTF_8));
   }

   @AfterClass
   public static void cleanup() throws IOException {
      if (tempFile != null) {
         Files.delete(tempFile);
         tempFile = null;
      }
   }

   @Test
   public void streamProviderDefaultIsSafe() throws Exception {
      Assertions.assertThatThrownBy(() -> {
         dtdEntity(new StreamProvider());
      }).isInstanceOf(XMLStreamException.class);

      Assertions.assertThatThrownBy(() -> {
         externalEntity(new StreamProvider());
      }).isInstanceOf(XMLStreamException.class);

      Assertions.assertThatThrownBy(() -> {
         entityBomb(new StreamProvider());
      }).isInstanceOf(Exception.class);

      numericEntity(new StreamProvider());
   }

   @Test
   public void streamProviderCustomFactory() throws Exception {
      dtdEntity(new StreamProvider(XMLInputFactory.newFactory()));
      externalEntity(new StreamProvider(XMLInputFactory.newFactory()));
      numericEntity(new StreamProvider(XMLInputFactory.newFactory()));
   }

   @Test
   public void documentProviderDefaultIsSafe() throws Exception {
      Assertions.assertThatThrownBy(() -> {
         dtdEntity(new DocumentProvider());
      }).isInstanceOf(Exception.class);

      Assertions.assertThatThrownBy(() -> {
         externalEntity(new DocumentProvider());
      }).isInstanceOf(Exception.class);

      Assertions.assertThatThrownBy(() -> {
         entityBomb(new DocumentProvider());
      }).isInstanceOf(Exception.class);

      numericEntity(new DocumentProvider());
   }

   @Test
   public void documentProviderCustomFactory() throws Exception {
      dtdEntity(new DocumentProvider(DocumentBuilderFactory.newInstance()));
      externalEntity(new DocumentProvider(DocumentBuilderFactory.newInstance()));
      numericEntity(new DocumentProvider(DocumentBuilderFactory.newInstance()));
   }

   private void externalEntity(Provider provider) throws Exception {
      String xml = "<!DOCTYPE foo [" +
          "<!ELEMENT foo ANY >" +
          "<!ENTITY bar SYSTEM \"" + tempFileUri + "\" >" +
          "]>\n" +
          "<foo>[&bar;]</foo>";

      Foo foo = toFoo(provider, xml);
      Assert.assertEquals("[injected]", foo.text);
   }

   private void dtdEntity(Provider provider) throws Exception {
      String xml = "<!DOCTYPE foo [" +
          "<!ELEMENT foo ANY >" +
          "<!ENTITY bar \"injected\" >" +
          "]>\n" +
          "<foo>[&bar;]</foo>";

      Foo foo = toFoo(provider, xml);
      Assert.assertEquals("[injected]", foo.text);
   }

   private void numericEntity(Provider provider) throws Exception {
      String xml = "<foo>[&lt;&gt;&#38;]</foo>";

      Foo foo = toFoo(provider, xml);
      Assert.assertEquals("[<>&]", foo.text);
   }

   private void entityBomb(Provider provider) throws Exception {
      String xml = "<!DOCTYPE foo [\n" +
          " <!ENTITY lol \"lol\">\n" +
          " <!ELEMENT foo ANY >\n" +
          " <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n" +
          " <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\n" +
          " <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\n" +
          " <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\n" +
          " <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\n" +
          " <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">\n" +
          " <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">\n" +
          " <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">\n" +
          " <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">\n" +
          "]>\n" +
          "<foo>&lol9;</foo>";

      Foo foo = toFoo(provider, xml);
      Assert.assertEquals("[<>&]", foo.text);
   }

   private Foo toFoo(Provider provider, String xml) throws Exception {
      NodeReader nodeReader = new NodeReader(provider.provide(new StringReader(xml)));
      InputNode inputNode = nodeReader.readRoot();
      return new Persister().read(Foo.class, inputNode);
   }
}
